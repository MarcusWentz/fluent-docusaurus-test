"use strict";(self.webpackChunkshardeum_docs=self.webpackChunkshardeum_docs||[]).push([[8682],{4038:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"smartContracts/EIP-2930/multicallContract","title":"Multicall Contract","description":"What is EIP-2930?","source":"@site/docs/smartContracts/EIP-2930/multicallContract.md","sourceDirName":"smartContracts/EIP-2930","slug":"/smartContracts/EIP-2930/multicallContract","permalink":"/docusaurus-template/smartContracts/EIP-2930/multicallContract","draft":false,"unlisted":false,"editUrl":"https://github.com/Shardeum/shardeum-docs/tree/master/docs/smartContracts/EIP-2930/multicallContract.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Multicall Contract","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Address List","permalink":"/docusaurus-template/smartContracts/tokens/addressList"},"next":{"title":"Solidity Interfaces","permalink":"/docusaurus-template/smartContracts/EIP-2930/solidityInterfaces"}}');var s=t(4848),r=t(8453),o=t(1470),i=t(9365);const l={title:"Multicall Contract",sidebar_position:1},c=void 0,d={},u=[{value:"What is EIP-2930?",id:"what-is-eip-2930",level:2},{value:"Why is EIP-2930 important?",id:"why-is-eip-2930-important",level:2},{value:"Where is EIP-2930 data located for a transaction?",id:"where-is-eip-2930-data-located-for-a-transaction",level:2},{value:"How do I define an accessList for an EIP-2930 transaction?",id:"how-do-i-define-an-accesslist-for-an-eip-2930-transaction",level:2},{value:"When should I use EIP-2930 on Shardeum Liberty 2.X?",id:"when-should-i-use-eip-2930-on-shardeum-liberty-2x",level:2},{value:"EIP-2930 Optional:",id:"eip-2930-optional",level:2},{value:"Transfer SHM on Shardeum Between Wallets:",id:"transfer-shm-on-shardeum-between-wallets",level:2},{value:"Contracts contractToCall and Multicall:",id:"contracts-contracttocall-and-multicall",level:2},{value:"contractToCall (Single Address):",id:"contracttocall-single-address",level:2},{value:"Multicall Storage Read:",id:"multicall-storage-read",level:2},{value:"EIP-2930 Required:",id:"eip-2930-required",level:2},{value:"Multicall Storage Write:",id:"multicall-storage-write",level:2},{value:"Liberty 2.X Address codeHash in storage slots:",id:"liberty-2x-address-codehash-in-storage-slots",level:2},{value:"Solidity codeHash example:",id:"solidity-codehash-example",level:2},{value:"EIP-2930 accessList transactions for Multicall contract to modify slot0 in contractToCall:",id:"eip-2930-accesslist-transactions-for-multicall-contract-to-modify-slot0-in-contracttocall",level:2},{value:"How can I create an EIP-2930 accessList easily?",id:"how-can-i-create-an-eip-2930-accesslist-easily",level:2},{value:"EIP-2930 accessList simulator",id:"eip-2930-accesslist-simulator",level:2},{value:"GlobalSwap: Liberty 2.X Multicall Sharded AMM DEX",id:"globalswap-liberty-2x-multicall-sharded-amm-dex",level:2}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"what-is-eip-2930",children:"What is EIP-2930?"}),"\n",(0,s.jsx)(n.p,{children:"EIP-2930 allows users to define addresses and storage slots for a transaction."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-2930",children:"https://eips.ethereum.org/EIPS/eip-2930"})}),"\n",(0,s.jsx)(n.h2,{id:"why-is-eip-2930-important",children:"Why is EIP-2930 important?"}),"\n",(0,s.jsx)(n.p,{children:"Shardeum Liberty 1.X does not require EIP-2930 because the network is not sharded.\nYou can optionally use EIP-2930 to save gas on Shardeum Liberty 1.X."}),"\n",(0,s.jsxs)(n.admonition,{title:"Automated Access List",type:"tip",children:[(0,s.jsx)(n.p,{children:"Sphinx 1.X and Liberty 2.X have automated the accessList for Shardeum RPC nodes to route shards."}),(0,s.jsx)(n.p,{children:"Therefore, you no longer need to specify the accessList for these networks with automated accessList generation."}),(0,s.jsx)(n.p,{children:"This document is useful for:"}),(0,s.jsxs)(n.p,{children:["-educational purposes",(0,s.jsx)(n.br,{}),"\n","-situations where the automated accessList fails and you need to specifiy the accessList directly"]})]}),"\n",(0,s.jsx)(n.h2,{id:"where-is-eip-2930-data-located-for-a-transaction",children:"Where is EIP-2930 data located for a transaction?"}),"\n",(0,s.jsx)(n.p,{children:"The accessList transaction parameter is where the EIP-2930 address and storage slot data goes."}),"\n",(0,s.jsx)(n.h2,{id:"how-do-i-define-an-accesslist-for-an-eip-2930-transaction",children:"How do I define an accessList for an EIP-2930 transaction?"}),"\n",(0,s.jsx)(n.p,{children:"Based on the EIP-2930 specification, the general syntax should be:"}),"\n",(0,s.jsx)(n.p,{children:"-the address [20 bytes]"}),"\n",(0,s.jsx)(n.p,{children:"-then the storage slots being accessed at that address [32 bytes]"}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'    [\n        [\n            "0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae",\n            [\n                "0x0000000000000000000000000000000000000000000000000000000000000003",\n                "0x0000000000000000000000000000000000000000000000000000000000000007"\n            ]\n        ],\n        [\n            "0xbb9bc244d798123fde783fcc1c72d3bb8c189413",\n            []\n        ]\n    ]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"when-should-i-use-eip-2930-on-shardeum-liberty-2x",children:"When should I use EIP-2930 on Shardeum Liberty 2.X?"}),"\n",(0,s.jsx)(n.h2,{id:"eip-2930-optional",children:"EIP-2930 Optional:"}),"\n",(0,s.jsx)(n.h2,{id:"transfer-shm-on-shardeum-between-wallets",children:"Transfer SHM on Shardeum Between Wallets:"}),"\n",(0,s.jsx)(n.p,{children:"Send an EIP-2930 transaction with an accessList address that has no storage:"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(i.A,{value:"javascript",label:"Javascript",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const Web3 = require(\'web3\')\nconst ethers = require("ethers")\n\nconst rpcURL = "https://liberty20.shardeum.org/"\nconst web3 = new Web3(rpcURL)\n\nconst provider = new ethers.providers.JsonRpcProvider(rpcURL)\nconst signer = new ethers.Wallet(Buffer.from(process.env.devTestnetPrivateKey, \'hex\'), provider);\nconsole.log("User wallet address: " + signer.address)\n\nconst transferToWallet = new ethers.Wallet(Buffer.from(process.env.devTestnetPrivateKeyTwo, \'hex\'), provider);\nconsole.log("transferToWallet address: " + transferToWallet.address)\n\ncreateAndSendTx();\n\nasync function createAndSendTx() {\n\n    const chainIdConnected = await web3.eth.getChainId();\n    console.log("chainIdConnected: "+ chainIdConnected)\n\n    const oneEtherInWeiSHM = "1000000000000000000"\n    console.log("oneEtherInWeiSHM: " + oneEtherInWeiSHM)\n\n    const userBalance = await provider.getBalance(signer.address);\n    console.log("User Balance [Shardeum SHM]" )\n    console.log(ethers.utils.formatEther(userBalance))\n\n    const receiverBalance = await provider.getBalance(transferToWallet.address);\n    console.log("Receiver Balance [Shardeum SHM]" )\n    console.log(ethers.utils.formatEther(receiverBalance))\n\n    const txCount = await provider.getTransactionCount(signer.address);\n\n    const tx = signer.sendTransaction({\n          chainId: chainIdConnected,\n          to: transferToWallet.address,\n          nonce:    web3.utils.toHex(txCount),\n          gasLimit: web3.utils.toHex(300000), // Raise the gas limit to a much higher amount\n          gasPrice: web3.utils.toHex(web3.utils.toWei(\'30\', \'gwei\')),\n          value: oneEtherInWeiSHM,\n          type: 1,\n          accessList: [\n            {\n              address: transferToWallet.address,\n              storageKeys: []\n            }\n          ]\n\n    });\n\n    console.log("WAIT FOR TX RECEIPT: ")\n    await tx\n    console.log("TX RECEIPT: ")\n    console.log(tx)\n\n}\n'})})}),(0,s.jsx)(i.A,{value:"python",label:"Python",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from web3 import Web3\nimport json\nimport os\nimport time\n\nShardeumConnectionHTTPS = "https://liberty20.shardeum.org/";\nweb3 = Web3(Web3.HTTPProvider(ShardeumConnectionHTTPS))\n\nchainIdConnected = web3.eth.chain_id\nprint("chainIdConnected: " + str(chainIdConnected))\n\ndevTestnetPrivateKey = str(os.environ[\'devTestnetPrivateKey\']);\n\nuserWallet = (web3.eth.account.from_key(devTestnetPrivateKey)).address\nprint("User Wallet Address: " + userWallet)\n\ndevTestnetPrivateKeyTwo = str(os.environ[\'devTestnetPrivateKeyTwo\']);\n\ntransferToWallet = (web3.eth.account.from_key(devTestnetPrivateKeyTwo)).address\nprint("transferToWallet address: " + transferToWallet)\n\noneEtherInWeiSHM = "1000000000000000000"\nprint("weiMsgValueToSend: " + oneEtherInWeiSHM)\n\nuserBalance =  web3.eth.getBalance(userWallet);\nprint("User Balance [Shardeum SHM]" )\nprint(web3.fromWei(userBalance, "ether"))\n\nreceiverBalance =  web3.eth.getBalance(transferToWallet);\nprint("Receiver Balance [Shardeum SHM]" )\nprint(web3.fromWei(receiverBalance, "ether"))\n\ntransferTx = {\n    \'chainId\' : chainIdConnected,\n    \'nonce\':  web3.eth.getTransactionCount(userWallet)       ,\n    \'to\': transferToWallet, #WORKS WITH REGULAR WALLETS BUT CANNOT SEND TO CONTRACT FOR SOME REASON?\n    \'gas\': 2100000, #WORKS WITH 1000000. If not try : Remix > deploy and run transactions\n    \'gasPrice\': web3.toWei(\'30\', \'gwei\'), # https://etherscan.io/gastracker\n    \'value\': int(oneEtherInWeiSHM),\n    \'accessList\' :\n                [\n                    {\n                        "address" : transferToWallet,\n                        "storageKeys": []\n                    }\n                ]\n}\n\nsigned_tx = web3.eth.account.signTransaction(transferTx, devTestnetPrivateKey)\ntx_hash = web3.toHex(web3.eth.sendRawTransaction(signed_tx.rawTransaction))\nprint("TX HASH: " + tx_hash)\n\ntime.sleep(15)\n\nreceipt = web3.eth.getTransactionReceipt(tx_hash)\nprint("TX RECEIPT: " + str(receipt) )\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"contracts-contracttocall-and-multicall",children:"Contracts contractToCall and Multicall:"}),"\n",(0,s.jsx)(o.A,{children:(0,s.jsx)(i.A,{value:"solidity",label:"Solidity",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract contractToCall {\n\n    uint public slot0; //uint is 32 bytes and fills a 32 byte slot. //Do not set 0 manually it wastes gas!\n\n    function set(uint x) public {\n        slot0 = x;\n    }\n\n}\n\ncontract Multicall {\n\n    contractToCall public callContractToCall;\n\n    constructor(address setCallOne) {\n        callContractToCall = contractToCall(setCallOne);\n    }\n\n    function multiCallRead() public view returns(uint) {\n        return callContractToCall.slot0();\n    }\n\n    function multiCallWrite(uint x) public {\n        callContractToCall.set(x);\n    }\n\n}\n"})})})}),"\n",(0,s.jsx)(n.h2,{id:"contracttocall-single-address",children:"contractToCall (Single Address):"}),"\n",(0,s.jsx)(n.p,{children:'Send an EIP-2930 transaction with a accessList. The accessList contains the contract\'s address and accessed storage slot (or slots).\nIn this case, it will be storage slot0, because it is a single uint storage variable (uint = 256 bits = 32 bytes) which is modified when we call "set(uint)".'}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(i.A,{value:"javascript",label:"Javascript",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const Web3 = require(\'web3\')\nconst ethers = require("ethers")\n\nconst rpcURL = "https://liberty20.shardeum.org/"\nconst web3 = new Web3(rpcURL)\n\nconst provider = new ethers.providers.JsonRpcProvider(rpcURL)\nconst signer = new ethers.Wallet(Buffer.from(process.env.devTestnetPrivateKey, \'hex\'), provider);\nconsole.log("User wallet address: " + signer.address)\n\nconst simpleStorageAddress = \'0xE8eb488bEe284ed5b9657D5fc928f90F40BC2d57\'\nconst simpleStorageABI = [{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"}],"name":"set","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]\n\nconst simpleStorageDeployed = new web3.eth.Contract(simpleStorageABI, simpleStorageAddress)\n\ncreateAndSendTx();\n\nasync function createAndSendTx() {\n\n    const chainIdConnected = await web3.eth.getChainId();\n    console.log("chainIdConnected: "+ chainIdConnected)\n\n    const slot0 = await simpleStorageDeployed.methods.slot0().call()\n    console.log("slot0: "+ slot0)\n\n    const unixTime = Date.now();\n    console.log("UNIX TIME: " + unixTime)\n\n    const txCount = await provider.getTransactionCount(signer.address);\n\n    const tx = signer.sendTransaction({\n          chainId: chainIdConnected,\n          to: simpleStorageAddress,\n          nonce:    web3.utils.toHex(txCount),\n          gasLimit: web3.utils.toHex(300000), // Raise the gas limit to a much higher amount\n          gasPrice: web3.utils.toHex(web3.utils.toWei(\'30\', \'gwei\')),\n          data: simpleStorageDeployed.methods.set(unixTime).encodeABI(),\n          type: 1,\n          accessList: [\n            {\n              address: simpleStorageAddress,\n              storageKeys: [\n                "0x0000000000000000000000000000000000000000000000000000000000000000",\n              ]\n            }\n          ]\n\n    });\n\n    console.log("WAIT FOR TX RECEIPT: ")\n    await tx\n    console.log("TX RECEIPT: ")\n    console.log(tx)\n\n}\n'})})}),(0,s.jsx)(i.A,{value:"python",label:"Python",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from web3 import Web3\nimport json\nimport os\nimport math\nimport time\n\nShardeumConnectionHTTPS = "https://liberty20.shardeum.org/";\nweb3 = Web3(Web3.HTTPProvider(ShardeumConnectionHTTPS))\n\nchainIdConnected = web3.eth.chain_id\nprint("chainIdConnected: " + str(chainIdConnected))\n\ndevTestnetPrivateKey = str(os.environ[\'devTestnetPrivateKey\']);\n\nuserWallet = (web3.eth.account.from_key(devTestnetPrivateKey)).address\nprint("User Wallet Address: " + userWallet)\n\nContract_At_Address= web3.toChecksumAddress("0xE8eb488bEe284ed5b9657D5fc928f90F40BC2d57");\nabi_Contract = json.loads(\'[{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"}],"name":"set","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]\')\ncontract_Call = web3.eth.contract(address = Contract_At_Address , abi = abi_Contract);\n\nprint(contract_Call.functions.slot0().call());\n\nunixTime = int(math.floor( time.time()*(10**3)) )\nprint("UNIX TIME: " + str(unixTime) )\n\nEIP_2930_tx = {\n    \'chainId\' : chainIdConnected,\n    \'nonce\':  web3.eth.getTransactionCount(userWallet)       ,\n    \'to\': Contract_At_Address, #WORKS WITH REGULAR WALLETS BUT CANNOT SEND TO CONTRACT FOR SOME REASON?\n    \'gas\': 2100000, #WORKS WITH 1000000. If not try : Remix > deploy and run transactions\n    \'gasPrice\': web3.toWei(\'30\', \'gwei\'), # https://etherscan.io/gastracker\n    \'data\' : contract_Call.encodeABI(fn_name=\'set\', args=[unixTime]) ,\n    \'accessList\' :\n                [\n                    {\n                        "address" : Contract_At_Address,\n                        "storageKeys": [\n                            "0x0000000000000000000000000000000000000000000000000000000000000000",\n                        ]\n                    }\n                ]\n}\n\nsigned_tx = web3.eth.account.signTransaction(EIP_2930_tx, devTestnetPrivateKey)\ntx_hash = web3.toHex(web3.eth.sendRawTransaction(signed_tx.rawTransaction))\nprint("TX HASH: " + tx_hash)\n\ntime.sleep(15)\n\nreceipt = web3.eth.getTransactionReceipt(tx_hash)\nprint("TX RECEIPT: " + str(receipt) )\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"multicall-storage-read",children:"Multicall Storage Read:"}),"\n",(0,s.jsx)(n.p,{children:"Reading contract states cross shard does not need an accessList."}),"\n",(0,s.jsx)(n.p,{children:"For example, ERC-20 multicall:"}),"\n",(0,s.jsx)(o.A,{children:(0,s.jsx)(i.A,{value:"solidity",label:"Solidity",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"tokenObject.totalSupply()\n"})})})}),"\n",(0,s.jsx)(n.p,{children:"will work with no accessList cross shard."}),"\n",(0,s.jsx)(n.h2,{id:"eip-2930-required",children:"EIP-2930 Required:"}),"\n",(0,s.jsx)(n.h2,{id:"multicall-storage-write",children:"Multicall Storage Write:"}),"\n",(0,s.jsx)(n.p,{children:"Writing contract states cross shard requires an accessList."}),"\n",(0,s.jsx)(n.p,{children:"For example, ERC-20 multicall:"}),"\n",(0,s.jsx)(o.A,{children:(0,s.jsx)(i.A,{value:"solidity",label:"Solidity",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"tokenObject.transfer(recipient, amount)\n"})})})}),"\n",(0,s.jsx)(n.p,{children:"will require an accessList to work cross shard."}),"\n",(0,s.jsx)(n.p,{children:'Contract Multicall can change states in other contracts (in this case contractToCall).\nFor sharded Shardeum networks (like Liberty 2.X), we need to specify the addresses and storage slots being called outside "from" and "to" in the transaction.'}),"\n",(0,s.jsx)(n.h2,{id:"liberty-2x-address-codehash-in-storage-slots",children:"Liberty 2.X Address codeHash in storage slots:"}),"\n",(0,s.jsx)(n.p,{children:"Liberty 2.X requires the codeHash for each externally called address (20 bytes) to be mentioned in a storage slot for each address being called externally.\nLiberty 2.1 will not need the codeHash in storage slots for each corresponding externally called address."}),"\n",(0,s.jsx)(n.p,{children:"In Solidity, you can get an address codeHash from a deployed contract on the matching network [along with checking if an address is a contract].\nYou can also get an address codeHash with the ethers library."}),"\n",(0,s.jsx)(n.h2,{id:"solidity-codehash-example",children:"Solidity codeHash example:"}),"\n",(0,s.jsx)(o.A,{children:(0,s.jsx)(i.A,{value:"solidity",label:"Solidity",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-solidity",children:"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ncontract addressCodeHash { //From https://soliditydeveloper.com/extcodehash\n\n    function getCodeHash(address account) public view returns (bytes32) {\n\n        bytes32 codeHash;    \n        assembly { codeHash := extcodehash(account) }\n\n        return (codeHash);\n    }\n\n    function isContractBasedOnHash(address account) public view returns (bool) {\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        bytes32 codeHash;    \n        assembly { codeHash := extcodehash(account) }\n\n        return (codeHash != accountHash && codeHash != 0x0);\n    }\n\n    function isContractBasedOnSize(address addr) public view returns (bool) {\n        uint size;\n        assembly { size := extcodesize(addr) }\n        return size > 0;\n    }\n\n}\n"})})})}),"\n",(0,s.jsx)(n.h2,{id:"eip-2930-accesslist-transactions-for-multicall-contract-to-modify-slot0-in-contracttocall",children:"EIP-2930 accessList transactions for Multicall contract to modify slot0 in contractToCall:"}),"\n",(0,s.jsxs)(o.A,{children:[(0,s.jsx)(i.A,{value:"javascript",label:"Javascript",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const Web3 = require(\'web3\')\nconst ethers = require("ethers")\n\nconst rpcURL = "https://liberty20.shardeum.org/"\nconst web3 = new Web3(rpcURL)\n\nconst provider = new ethers.providers.JsonRpcProvider(rpcURL)\nconst signer = new ethers.Wallet(Buffer.from(process.env.devTestnetPrivateKey, \'hex\'), provider);\nconsole.log("User wallet address: " + signer.address)\n\nconst contractAddress_JS = \'0xb1fEf690f84241738b188eF8b88e52B2cc59AbD2\'\nconst contractABI_JS = [{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"}],"name":"multiCallWrite","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"setCallOne","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"callContractToCall","outputs":[{"internalType":"contractcontractToCall","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"multiCallRead","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]\n\nconst contractDefined_JS = new web3.eth.Contract(contractABI_JS, contractAddress_JS)\n\ncreateAndSendTx();\n\nasync function createAndSendTx() {\n\n    const chainIdConnected = await web3.eth.getChainId();\n    console.log("chainIdConnected: "+ chainIdConnected)\n\n    const slot0 = await contractDefined_JS.methods.multiCallRead().call()\n    console.log("slot0: "+ slot0)\n\n    const contractOneAddress = await contractDefined_JS.methods.callContractToCall().call()\n    console.log("contractOneAddress: "+ contractOneAddress)\n\n    const codeHash = await provider.getCode(contractOneAddress)\n    console.log("contractOneAddress codeHash: " + codeHash)\n\n    const unixTime = Date.now();\n    console.log("UNIX TIME: " + unixTime)\n\n    const txCount = await provider.getTransactionCount(signer.address);\n\n    const tx = signer.sendTransaction({\n        chainId: chainIdConnected,\n        to: contractAddress_JS,\n        nonce:    web3.utils.toHex(txCount),\n        gasLimit: web3.utils.toHex(2100000), // Raise the gas limit to a much higher amount\n        gasPrice: web3.utils.toHex(web3.utils.toWei(\'30\', \'gwei\')),\n        data: contractDefined_JS.methods.multiCallWrite(unixTime).encodeABI(),\n        type: 1,\n        accessList: [\n          {\n            address: contractOneAddress, //Contract address we are calling from the "to" contract at some point.\n            storageKeys: [\n              "0x0000000000000000000000000000000000000000000000000000000000000000",\n              codeHash, //Code hash from EXTCODEHASH https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\n            ]\n          }\n        ]\n\n    });\n\n    console.log("WAIT FOR TX RECEIPT: ")\n    await tx\n    console.log("TX RECEIPT: ")\n    console.log(tx)\n\n}\n'})})}),(0,s.jsx)(i.A,{value:"python",label:"Python",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from web3 import Web3\nimport json\nimport os\nimport time\nimport math\n\nShardeumConnectionHTTPS = "https://liberty20.shardeum.org/";\nweb3 = Web3(Web3.HTTPProvider(ShardeumConnectionHTTPS))\n\nchainIdConnected = web3.eth.chain_id\nprint("chainIdConnected: " + str(chainIdConnected))\n\ndevTestnetPrivateKey = str(os.environ[\'devTestnetPrivateKey\']);\n\nuserWallet = (web3.eth.account.from_key(devTestnetPrivateKey)).address\nprint("User Wallet Address: " + userWallet)\n\nmulticallContractAddress= web3.toChecksumAddress("0xb1fEf690f84241738b188eF8b88e52B2cc59AbD2");\nmulticallContractABI = json.loads(\'[{"inputs":[{"internalType":"uint256","name":"x","type":"uint256"}],"name":"multiCallWrite","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"setCallOne","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"callContractToCall","outputs":[{"internalType":"contractcontractToCall","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"multiCallRead","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]\')\nmulticallContractDeployed = web3.eth.contract(address = multicallContractAddress , abi = multicallContractABI);\n\ncontractOneAddress = multicallContractDeployed.functions.callContractToCall().call()\nprint("contractOneAddress: "+contractOneAddress)\n\nslot0 = multicallContractDeployed.functions.multiCallRead().call()\nprint("slot0: "+ str(slot0) )\n\ncodeHashBytes32 =  (web3.eth.get_code(contractOneAddress))\ncodeHashString = codeHashBytes32.hex()\nprint("contractOneAddress codeHash: " + codeHashString )\n\nunixTime = int(math.floor( time.time()*(10**3)) )\nprint("UNIX TIME: " + str(unixTime) )\n\nEIP_2930_tx = {\n  \'chainId\' : chainIdConnected,\n  \'to\': multicallContractAddress, #WORKS WITH REGULAR WALLETS BUT CANNOT SEND TO CONTRACT FOR SOME REASON?\n  \'nonce\':  web3.eth.getTransactionCount(userWallet)       ,\n  \'gas\': 2100000, #WORKS WITH 1000000. If not try : Remix > deploy and run transactions\n  \'gasPrice\': web3.toWei(\'30\', \'gwei\'), # https://etherscan.io/gastracker\n  \'data\' : multicallContractDeployed.encodeABI(fn_name=\'multiCallWrite\', args=[unixTime]) ,\n  \'type\' : 1,\n  \'accessList\' :\n              [\n                  {\n                      "address" : contractOneAddress,\n                      "storageKeys": [\n                          "0x0000000000000000000000000000000000000000000000000000000000000000",\n                          codeHashString  ##Code hash from EXTCODEHASH https://blog.finxter.com/how-to-find-out-if-an-ethereum-address-is-a-contract/\n                      ]\n                  }\n              ]\n}\n\nsigned_tx = web3.eth.account.signTransaction(EIP_2930_tx, devTestnetPrivateKey)\ntx_hash = web3.toHex(web3.eth.sendRawTransaction(signed_tx.rawTransaction))\nprint("TX HASH: " + tx_hash)\n\ntime.sleep(15)\n\nreceipt = web3.eth.getTransactionReceipt(tx_hash)\nprint("TX RECEIPT: " + str(receipt) )\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"how-can-i-create-an-eip-2930-accesslist-easily",children:"How can I create an EIP-2930 accessList easily?"}),"\n",(0,s.jsx)(n.h2,{id:"eip-2930-accesslist-simulator",children:"EIP-2930 accessList simulator"}),"\n",(0,s.jsx)(n.p,{children:"Tool generates accessList with 91% accuracy:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/alexchenzl/predict-al",children:"https://github.com/alexchenzl/predict-al"})}),"\n",(0,s.jsx)(n.h2,{id:"globalswap-liberty-2x-multicall-sharded-amm-dex",children:"GlobalSwap: Liberty 2.X Multicall Sharded AMM DEX"}),"\n",(0,s.jsx)(n.p,{children:"Website:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://globalswap.netlify.app/#/swap",children:"https://globalswap.netlify.app/#/swap"})}),"\n",(0,s.jsx)(n.p,{children:"EIP-2930 accessList generation for swap transactions can be found in this GitHub repository:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/shardeum-globalswap/interface/tree/support-eip2930",children:"https://github.com/shardeum-globalswap/interface/tree/support-eip2930"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},9365:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var a=t(8215);const s={tabItem:"tabItem_Ymn6"};var r=t(4848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,o),hidden:t,children:n})}},1470:(e,n,t)=>{t.d(n,{A:()=>v});var a=t(6540),s=t(8215),r=t(3104),o=t(6347),i=t(205),l=t(7485),c=t(1682),d=t(679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:s}}=e;return{value:n,label:t,attributes:a,default:s}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,o.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})}),[r,s])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=h(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[c,u]=m({queryString:t,groupId:s}),[b,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,r]=(0,d.Dv)(t);return[s,(0,a.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:s}),f=(()=>{const e=c??b;return p({value:e,tabValues:r})?e:null})();(0,i.A)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,r]),tabValues:r}}var g=t(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=t(4848);function y(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),s=i[t].value;s!==a&&(c(n),o(s))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...r,className:(0,s.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:r}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function T(e){const n=b(e);return(0,x.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,x.jsx)(y,{...n,...e}),(0,x.jsx)(w,{...n,...e})]})}function v(e){const n=(0,g.A)();return(0,x.jsx)(T,{...e,children:u(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(6540);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);